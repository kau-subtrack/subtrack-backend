name: CI/CD Pipeline

on:
  push:
    branches: [ dev, main ]  # dev 또는 main 브랜치에 push 시 실행
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run tests
      run: npm test
    
    - name: Check syntax
      run: node -c src/server.js

  build-and-deploy:
    needs: test  # test 작업이 성공한 후 실행
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'  # main 또는 dev 브랜치에서 배포
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci --only=production
    
    - name: Create .env file
      run: |
        echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" > .env
        echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
        echo "PORT=3000" >> .env
        echo "NODE_ENV=production" >> .env
    
    - name: Generate Prisma Client
      run: npx prisma generate
    
    - name: Deploy to EC2
      env:
        EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
        EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
        EC2_HOST: ${{ secrets.EC2_HOST }}
      run: |
        # SSH 키 설정
        echo "$EC2_SSH_KEY" > private_key.pem
        chmod 600 private_key.pem
        
        # 프로젝트 파일들을 EC2에 복사
        rsync -avz -e "ssh -i private_key.pem -o StrictHostKeyChecking=no" \
          --exclude node_modules \
          --exclude .git \
          --exclude .github \
          --exclude tests \
          ./ $EC2_USERNAME@$EC2_HOST:/home/$EC2_USERNAME/subtrack-backend/
        
        # EC2에서 배포 스크립트 실행
        ssh -i private_key.pem -o StrictHostKeyChecking=no $EC2_USERNAME@$EC2_HOST "
          set -e  # 오류 발생 시 즉시 중단
          
          echo 'Starting deployment...'
          cd /home/$EC2_USERNAME/subtrack-backend || { echo 'Failed to change directory'; exit 1; }
          
          echo 'Stopping existing Node.js processes...'
          pkill -f 'node.*server.js' || echo 'No existing processes to kill'
          sleep 2
          
          echo 'Installing dependencies...'
          npm ci --only=production || { echo 'npm install failed'; exit 1; }
          
          echo 'Generating Prisma client...'
          npx prisma generate || { echo 'Prisma generate failed'; exit 1; }
          
          echo 'Running database migrations...'
          npx prisma migrate deploy || echo 'Migration failed, continuing...'
          
          echo 'Starting application...'
          nohup node src/server.js > app.log 2>&1 &
          
          echo 'Waiting for application to start...'
          sleep 3
          
          echo 'Checking if application is running...'
          if pgrep -f 'node.*server.js' > /dev/null; then
            echo 'Application started successfully!'
          else
            echo 'Warning: Application may not have started properly'
          fi
          
          echo 'Deployment completed!'
        " || { echo 'SSH command failed'; exit 1; }
        
        # 민감한 정보 삭제
        rm -f private_key.pem
